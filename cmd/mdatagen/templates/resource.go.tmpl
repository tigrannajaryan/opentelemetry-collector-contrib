// Code generated by mdatagen. DO NOT EDIT.

package {{ .Package }}

import (
	"go.opentelemetry.io/collector/pdata/pcommon"
	{{- if .Entity.Type }}
	"go.opentelemetry.io/collector/pdata/pentity"
	{{- end }}
)

// ResourceBuilder is a helper struct to build resources predefined in metadata.yaml.
// The ResourceBuilder is not thread-safe and must not to be used in multiple goroutines.
type ResourceBuilder struct {
	config ResourceAttributesConfig
	res	pcommon.Resource
	{{- if .Entity.Type }}
	ent pentity.EntityEvent
	{{- end }}
}

// NewResourceBuilder creates a new ResourceBuilder. This method should be called on the start of the application.
func NewResourceBuilder(rac ResourceAttributesConfig) *ResourceBuilder {
    res := pcommon.NewResource()
    {{- if .Entity.Type }}
    ent := pentity.NewEntityEvent()

    // Set the producing entity type in the Resource.
    res.SetEntityType("{{ .Entity.Type }}")

    // Prepare an EntityState event.
    ent.SetEmptyEntityState()
    ent.SetEntityType("{{ .Entity.Type }}")
    {{- end }}

	return &ResourceBuilder{
		config: rac,
		res: res,
		{{- if .Entity.Type }}
		ent: ent,
		{{- end }}
	}
}

{{- range $name, $attr := .ResourceAttributes }}
{{- range $attr.Enum }}
// Set{{ $name.Render }}{{ . | publicVar }} sets "{{ $name }}={{ . }}" attribute.
func (rb *ResourceBuilder) Set{{ $name.Render }}{{ . | publicVar }}() {
	if rb.config.{{ $name.Render }}.Enabled {
		rb.res.Attributes().PutStr("{{ $name }}", "{{ . }}")
        {{- if $.Entity.Type }}
		{{- if eq $attr.EntityIdentifying true }}
        rb.res.EntityId().PutStr("{{ $name }}", "{{ . }}")
        rb.ent.Id().PutStr("{{ $name }}", "{{ . }}")
        {{- else }}
        rb.ent.EntityState().Attributes().PutStr("{{ $name }}", "{{ . }}")
        {{- end }}
        {{- end }}
	}
}
{{- else }}
// Set{{ $name.Render }} sets provided value as "{{ $name }}" attribute.
func (rb *ResourceBuilder) Set{{ $name.Render }}(val {{ $attr.Type.Primitive }}) {
	if rb.config.{{ $name.Render }}.Enabled {
		{{- if or (eq $attr.Type.String "Bytes") (eq $attr.Type.String "Slice") (eq $attr.Type.String "Map") }}
		rb.res.Attributes().PutEmpty{{ $attr.Type }}("{{ $name }}").FromRaw(val)
		{{- else }}
		rb.res.Attributes().Put{{ $attr.Type }}("{{ $name }}", val)
		{{- end }}
        {{- if $.Entity.Type }}
		{{- if eq $attr.EntityIdentifying true }}
		// This is an identifying attribute of the entity.
		{{- if or (eq $attr.Type.String "Bytes") (eq $attr.Type.String "Slice") (eq $attr.Type.String "Map") }}
		rb.res.EntityId().PutEmpty{{ $attr.Type }}("{{ $name }}").FromRaw(val)
		rb.ent.Id().PutEmpty{{ $attr.Type }}("{{ $name }}").FromRaw(val)
		{{- else }}
		rb.res.EntityId().Put{{ $attr.Type }}("{{ $name }}", val)
		rb.ent.Id().Put{{ $attr.Type }}("{{ $name }}", val)
		{{- end }}
        {{- else }}
		// This is a non-identifying attribute of the entity.
		{{- if or (eq $attr.Type.String "Bytes") (eq $attr.Type.String "Slice") (eq $attr.Type.String "Map") }}
		rb.ent.EntityState().Attributes().PutEmpty{{ $attr.Type }}("{{ $name }}").FromRaw(val)
		{{- else }}
		rb.ent.EntityState().Attributes().Put{{ $attr.Type }}("{{ $name }}", val)
		{{- end }}
        {{- end }}
        {{- end }}
	}
}
{{- end }}
{{ end }}

// Emit returns the built resource and resets the internal builder state.
func (rb *ResourceBuilder) Emit() pcommon.Resource {
	r := rb.res
	rb.res = pcommon.NewResource()
	return r
}
